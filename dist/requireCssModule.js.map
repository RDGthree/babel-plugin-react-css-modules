{"version":3,"sources":["../src/requireCssModule.ts"],"names":["getFiletypeOptions","cssSourceFilePath","filetypes","extension","substr","lastIndexOf","filetype","getSyntax","filetypeOptions","syntax","require","getExtraPlugins","plugins","map","plugin","Array","isArray","pluginName","pluginOptions","getTokens","runner","includePaths","options","from","fileContents","sass","renderSync","file","css","toString","lazyResult","process","warnings","forEach","message","console","warn","text","root","tokens","generateScopedName","optionsDefaults","context","cwd","fetch","to","fromDirectoryPath","toPath","extraPlugins","Values","LocalByDefault","ExtractImports","Parser"],"mappings":"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","sourcesContent":["import { dirname, resolve } from \"path\";\nimport { readFileSync } from \"fs\";\nimport sass from \"sass\";\nimport postcss from \"postcss\";\nimport genericNames from \"generic-names\";\nimport ExtractImports from \"postcss-modules-extract-imports\";\nimport LocalByDefault from \"postcss-modules-local-by-default\";\nimport Parser from \"postcss-modules-parser\";\nimport Scope from \"postcss-modules-scope\";\nimport Values from \"postcss-modules-values\";\nimport type { GenerateScopedNameConfigurationType, StyleModuleMapType } from \"./types\";\nimport optionsDefaults from \"./schemas/optionsDefaults\";\ntype FiletypeOptionsType = {\n  readonly syntax: string;\n  readonly plugins?: ReadonlyArray<string | ReadonlyArray<[string, unknown]>>;\n};\ntype FiletypesConfigurationType = Record<string, FiletypeOptionsType>;\ntype OptionsType = {\n  context?: string;\n  filetypes: FiletypesConfigurationType;\n  generateScopedName?: GenerateScopedNameConfigurationType;\n  includePaths?: ReadonlyArray<string>;\n};\n\nconst getFiletypeOptions = (cssSourceFilePath: string, filetypes: FiletypesConfigurationType): FiletypeOptionsType | null | undefined => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n  return filetype;\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getSyntax = (filetypeOptions: FiletypeOptionsType): (((...args: Array<any>) => any) | Record<string, any>) | null | undefined => {\n  if (!filetypeOptions || !filetypeOptions.syntax) {\n    return null;\n  }\n\n  // eslint-disable-next-line import/no-dynamic-require, global-require\n  return require(filetypeOptions.syntax);\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getExtraPlugins = (filetypeOptions: FiletypeOptionsType | null | undefined): ReadonlyArray<any> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map(plugin => {\n    if (Array.isArray(plugin)) {\n      const [pluginName, pluginOptions] = plugin;\n      // eslint-disable-next-line import/no-dynamic-require, global-require\n      return require(pluginName)(pluginOptions);\n    }\n\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    return require(plugin as string);\n  });\n};\n\nconst getTokens = (runner, cssSourceFilePath: string, filetypeOptions: FiletypeOptionsType | null | undefined, includePaths?: ReadonlyArray<string>): StyleModuleMapType => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  // eslint-disable-next-line flowtype/no-weak-types\n  const options: Record<string, any> = {\n    from: cssSourceFilePath\n  };\n\n  if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  let fileContents;\n\n  if (extension === '.scss') {\n    fileContents = sass.renderSync({\n      file: cssSourceFilePath,\n      includePaths: includePaths as string[]\n    });\n    fileContents = fileContents.css.toString();\n  } else {\n    fileContents = readFileSync(cssSourceFilePath, 'utf-8');\n  }\n\n  const lazyResult = runner.process(fileContents, options);\n  lazyResult.warnings().forEach(message => {\n    // eslint-disable-next-line no-console\n    console.warn(message.text);\n  });\n  return lazyResult.root.tokens;\n};\n\nexport default ((cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n  let generateScopedName;\n\n  if (options.generateScopedName && typeof options.generateScopedName === 'function') {\n    generateScopedName = options.generateScopedName;\n  } else {\n    generateScopedName = genericNames((options.generateScopedName || optionsDefaults.generateScopedName) as string, {\n      context: options.context || process.cwd()\n    });\n  }\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n    return getTokens(runner, toPath, filetypeOptions, options.includePaths);\n  };\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n  const plugins = [...extraPlugins, Values, LocalByDefault, ExtractImports, Scope({\n    generateScopedName\n  }), new Parser({\n    fetch\n  })];\n  runner = postcss(plugins);\n  return getTokens(runner, cssSourceFilePath, filetypeOptions, options.includePaths);\n});\n"],"file":"requireCssModule.js"}