{"version":3,"sources":["../src/requireCssModule.js"],"names":["getFiletypeOptions","cssSourceFilePath","filetypes","extension","substr","lastIndexOf","filetype","getSyntax","filetypeOptions","syntax","require","getExtraPlugins","plugins","map","plugin","getTokens","runner","includePaths","options","from","fileContents","sass","renderSync","file","css","toString","lazyResult","process","warnings","forEach","message","console","warn","text","root","tokens","generateScopedName","context","cwd","fetch","to","fromDirectoryPath","toPath","extraPlugins","Values","LocalByDefault","ExtractImports","Scope","Parser"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  dirname,\n  resolve\n} from 'path';\nimport {\n  readFileSync\n} from 'fs';\nimport sass from 'node-sass';\nimport postcss from 'postcss';\nimport genericNames from 'generic-names';\nimport ExtractImports from 'postcss-modules-extract-imports';\nimport LocalByDefault from 'postcss-modules-local-by-default';\nimport Parser from 'postcss-modules-parser';\nimport Scope from 'postcss-modules-scope';\nimport Values from 'postcss-modules-values';\nimport type {\n  GenerateScopedNameConfigurationType,\n  StyleModuleMapType\n} from './types';\n\ntype FiletypeOptionsType = {|\n  +syntax: string,\n  +plugins?: $ReadOnlyArray<string>\n|};\n\ntype FiletypesConfigurationType = {\n  [key: string]: FiletypeOptionsType\n};\n\nconst getFiletypeOptions = (cssSourceFilePath: string, filetypes: FiletypesConfigurationType): ?FiletypeOptionsType => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  const filetype = filetypes ? filetypes[extension] : null;\n\n  return filetype;\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getSyntax = (filetypeOptions: FiletypeOptionsType): ?(Function | Object) => {\n  if (!filetypeOptions || !filetypeOptions.syntax) {\n    return null;\n  }\n\n  // eslint-disable-next-line import/no-dynamic-require, global-require\n  return require(filetypeOptions.syntax);\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getExtraPlugins = (filetypeOptions: ?FiletypeOptionsType): $ReadOnlyArray<*> => {\n  if (!filetypeOptions || !filetypeOptions.plugins) {\n    return [];\n  }\n\n  return filetypeOptions.plugins.map((plugin) => {\n    // eslint-disable-next-line import/no-dynamic-require, global-require\n    return require(plugin);\n  });\n};\n\nconst getTokens = (runner, cssSourceFilePath: string, filetypeOptions: ?FiletypeOptionsType, includePaths?: Array<string>): StyleModuleMapType => {\n  const extension = cssSourceFilePath.substr(cssSourceFilePath.lastIndexOf('.'));\n  // eslint-disable-next-line flowtype/no-weak-types\n  const options: Object = {\n    from: cssSourceFilePath\n  };\n\n  if (filetypeOptions) {\n    options.syntax = getSyntax(filetypeOptions);\n  }\n\n  let fileContents = '';\n\n  if (extension === '.scss') {\n    fileContents = sass.renderSync({\n      file: cssSourceFilePath,\n      includePaths\n    });\n    fileContents = fileContents.css.toString();\n  } else {\n    fileContents = readFileSync(cssSourceFilePath, 'utf-8');\n  }\n\n  const lazyResult = runner\n    .process(fileContents, options);\n\n  lazyResult\n    .warnings()\n    .forEach((message) => {\n      // eslint-disable-next-line no-console\n      console.warn(message.text);\n    });\n\n  return lazyResult.root.tokens;\n};\n\ntype OptionsType = {|\n  context?: string,\n  filetypes: FiletypesConfigurationType,\n  generateScopedName?: GenerateScopedNameConfigurationType,\n  includePaths?: Array<string>\n|};\n\nexport default (cssSourceFilePath: string, options: OptionsType): StyleModuleMapType => {\n  // eslint-disable-next-line prefer-const\n  let runner;\n\n  let generateScopedName;\n\n  if (options.generateScopedName && typeof options.generateScopedName === 'function') {\n    generateScopedName = options.generateScopedName;\n  } else {\n    generateScopedName = genericNames(options.generateScopedName || '[path]___[name]__[local]___[hash:base64:5]', {\n      context: options.context || process.cwd()\n    });\n  }\n\n  const filetypeOptions = getFiletypeOptions(cssSourceFilePath, options.filetypes);\n\n  const fetch = (to: string, from: string) => {\n    const fromDirectoryPath = dirname(from);\n    const toPath = resolve(fromDirectoryPath, to);\n\n    return getTokens(runner, toPath, filetypeOptions, options.includePaths);\n  };\n\n  const extraPlugins = getExtraPlugins(filetypeOptions);\n\n  const plugins = [\n    ...extraPlugins,\n    Values,\n    LocalByDefault,\n    ExtractImports,\n    new Scope({\n      generateScopedName\n    }),\n    new Parser({\n      fetch\n    })\n  ];\n\n  runner = postcss(plugins);\n\n  return getTokens(runner, cssSourceFilePath, filetypeOptions, options.includePaths);\n};\n"],"file":"requireCssModule.js"}