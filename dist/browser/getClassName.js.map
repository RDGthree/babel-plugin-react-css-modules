{"version":3,"sources":["../../src/getClassName.ts"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["import type { StyleModuleMapType, StyleModuleImportMapType, HandleMissingStyleNameOptionType, GetClassNameOptionsType } from \"./types\";\nimport optionsDefaults from \"./schemas/optionsDefaults\";\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst handleError = (message: string, handleMissingStyleName: HandleMissingStyleNameOptionType): null => {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nconst getClassNameForNamespacedStyleName = (styleName: string, styleModuleImportMap: StyleModuleImportMapType, handleMissingStyleNameOption?: HandleMissingStyleNameOptionType): string | null | undefined => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = (handleMissingStyleNameOption || optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType;\n\n  if (!moduleName) {\n    return handleError('Invalid style name: ' + styleName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError('CSS module import does not exist: ' + importName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError('CSS module does not exist: ' + moduleName, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nconst getClassNameFromMultipleImports = (styleName: string, styleModuleImportMap: StyleModuleImportMapType, handleMissingStyleNameOption?: HandleMissingStyleNameOptionType): string | null | undefined => {\n  const handleMissingStyleName = (handleMissingStyleNameOption || optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType;\n  const importKeysWithMatches = Object.keys(styleModuleImportMap).map(importKey => {\n    return styleModuleImportMap[importKey][styleName] && importKey;\n  }).filter(importKey => {\n    return importKey;\n  });\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error('Cannot resolve styleName \"' + styleName + '\" because it is present in multiple imports:' + '\\n\\n\\t' + importKeysWithMatches.join('\\n\\t') + '\\n\\nYou can resolve this by using a named import, e.g:' + '\\n\\n\\timport foo from \"' + importKeysWithMatches[0] + '\";' + '\\n\\t<div styleName=\"foo.' + styleName + '\" />' + '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nexport default ((styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: GetClassNameOptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n  const {\n    handleMissingStyleName = (optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType,\n    autoResolveMultipleImports = optionsDefaults.autoResolveMultipleImports\n  } = options || {};\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue.split(' ').filter(styleName => {\n    return styleName;\n  }).map(styleName => {\n    if (isNamespacedStyleName(styleName)) {\n      return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    if (styleModuleImportMapKeys.length === 0) {\n      throw new Error('Cannot use styleName attribute for style name \\'' + styleName + '\\' without importing at least one stylesheet.');\n    }\n\n    if (styleModuleImportMapKeys.length > 1) {\n      if (!autoResolveMultipleImports) {\n        throw new Error('Cannot use anonymous style name \\'' + styleName + '\\' with more than one stylesheet import without setting \\'autoResolveMultipleImports\\' to true.');\n      }\n\n      return getClassNameFromMultipleImports(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n    if (!styleModuleMap[styleName]) {\n      return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n    }\n\n    return styleModuleMap[styleName];\n  }).filter(className => {\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    return className;\n  }).join(' ');\n});\n"]}