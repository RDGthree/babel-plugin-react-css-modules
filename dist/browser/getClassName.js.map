{"version":3,"sources":["../../src/getClassName.js"],"names":[],"mappings":"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","file":"getClassName.js","sourcesContent":["// @flow\n\nimport type {\n  StyleModuleMapType,\n  StyleModuleImportMapType,\n  HandleMissingStyleNameOptionType\n} from './types';\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst getClassNameForNamespacedStyleName = (\n  styleName: string,\n  styleModuleImportMap: StyleModuleImportMapType,\n  handleMissingStyleNameOption?: HandleMissingStyleNameOptionType\n): ?string => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = handleMissingStyleNameOption || 'throw';\n\n  if (!moduleName) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('Invalid style name.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('Invalid style name.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module import does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module import does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    if (handleMissingStyleName === 'throw') {\n      throw new Error('CSS module does not exist.');\n    } else if (handleMissingStyleName === 'warn') {\n      // eslint-disable-next-line no-console\n      console.warn('CSS module does not exist.');\n    } else {\n      return null;\n    }\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\ntype OptionsType = {|\n  handleMissingStyleName: HandleMissingStyleNameOptionType\n|};\n\nexport default (styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: OptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n\n  const handleMissingStyleName = options && options.handleMissingStyleName;\n\n  return styleNameValue\n    .split(' ')\n    .filter((styleName) => {\n      return styleName;\n    })\n    .map((styleName) => {\n      if (isNamespacedStyleName(styleName)) {\n        return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n      }\n\n      if (styleModuleImportMapKeys.length === 0) {\n        throw new Error('Cannot use styleName attribute without importing at least one stylesheet.');\n      }\n\n      if (styleModuleImportMapKeys.length > 1) {\n        throw new Error('Cannot use anonymous style name with more than one stylesheet import.');\n      }\n\n      const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n      if (!styleModuleMap[styleName]) {\n        if (handleMissingStyleName === 'throw') {\n          throw new Error('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n        if (handleMissingStyleName === 'warn') {\n          // eslint-disable-next-line no-console\n          console.warn('Could not resolve the styleName \\'' + styleName + '\\'.');\n        }\n      }\n\n      return styleModuleMap[styleName];\n    })\n    .filter((className) => {\n      // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n      return className;\n    })\n    .join(' ');\n};\n"]}