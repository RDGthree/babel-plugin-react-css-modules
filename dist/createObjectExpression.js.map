{"version":3,"sources":["../src/createObjectExpression.js"],"names":["createObjectExpression","type","object","properties","name","Object","keys","value","newValue","isAnyTypeAnnotation","stringLiteral","booleanLiteral","TypeError","push","objectProperty","objectExpression"],"mappings":";;;;;;;AAEA;;;;AAQA;;;AAGA,MAAMA,sBAAsB,GAAG,CAACC,IAAD,EAAmBC,MAAnB,KAAiE;AAC9F,QAAMC,UAAU,GAAG,EAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAnB,EAAwC;AACtC,UAAMK,KAAK,GAAGL,MAAM,CAACE,IAAD,CAApB;AAEA,QAAII,QAAJ,CAHsC,CAKtC;;AACA,QAAIP,IAAI,CAACQ,mBAAL,CAAyBF,KAAzB,CAAJ,EAAqC,CAEpC,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,MAAAA,QAAQ,GAAGP,IAAI,CAACS,aAAL,CAAmBH,KAAnB,CAAX;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,MAAAA,QAAQ,GAAGR,sBAAsB,CAACC,IAAD,EAAOM,KAAP,CAAjC;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACrCC,MAAAA,QAAQ,GAAGP,IAAI,CAACU,cAAL,CAAoBJ,KAApB,CAAX;AACD,KAFM,MAEA;AACL,YAAM,IAAIK,SAAJ,CAAc,kBAAd,CAAN;AACD;;AAEDT,IAAAA,UAAU,CAACU,IAAX,CACEZ,IAAI,CAACa,cAAL,CACEb,IAAI,CAACS,aAAL,CAAmBN,IAAnB,CADF,EAEEI,QAFF,CADF;AAMD;;AAED,SAAOP,IAAI,CAACc,gBAAL,CAAsBZ,UAAtB,CAAP;AACD,CA9BD;;eAgCeH,sB","sourcesContent":["// @flow\n\nimport BabelTypes, {\n  ObjectExpression\n} from '@babel/types';\n\ntype InputObjectType = {\n  [key: string]: *\n};\n\n/**\n * Creates an AST representation of an InputObjectType shape object.\n */\nconst createObjectExpression = (type: BabelTypes, object: InputObjectType): ObjectExpression => {\n  const properties = [];\n\n  for (const name of Object.keys(object)) {\n    const value = object[name];\n\n    let newValue;\n\n    // eslint-disable-next-line no-empty\n    if (type.isAnyTypeAnnotation(value)) {\n\n    } else if (typeof value === 'string') {\n      newValue = type.stringLiteral(value);\n    } else if (typeof value === 'object') {\n      newValue = createObjectExpression(type, value);\n    } else if (typeof value === 'boolean') {\n      newValue = type.booleanLiteral(value);\n    } else {\n      throw new TypeError('Unexpected type.');\n    }\n\n    properties.push(\n      type.objectProperty(\n        type.stringLiteral(name),\n        newValue\n      )\n    );\n  }\n\n  return type.objectExpression(properties);\n};\n\nexport default createObjectExpression;\n"],"file":"createObjectExpression.js"}