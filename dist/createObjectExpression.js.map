{"version":3,"sources":["../src/createObjectExpression.ts"],"names":["createObjectExpression","t","object","properties","name","Object","keys","value","newValue","isAnyTypeAnnotation","stringLiteral","booleanLiteral","TypeError","push","objectProperty","objectExpression"],"mappings":";;;;;;;AAGA;AACA;AACA;AACA,MAAMA,sBAAsB,GAAG,CAACC,CAAD,EAAuBC,MAAvB,KAAgF;AAC7G,QAAMC,UAAU,GAAG,EAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAnB,EAAwC;AACtC,UAAMK,KAAK,GAAGL,MAAM,CAACE,IAAD,CAApB;AACA,QAAII,QAAJ,CAFsC,CAItC;;AACA,QAAIP,CAAC,CAACQ,mBAAF,CAAsBF,KAAtB,CAAJ,EAAkC,CAAE,CAApC,MAA0C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACvEC,MAAAA,QAAQ,GAAGP,CAAC,CAACS,aAAF,CAAgBH,KAAhB,CAAX;AACD,KAFyC,MAEnC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AACpCC,MAAAA,QAAQ,GAAGR,sBAAsB,CAACC,CAAD,EAAIM,KAAJ,CAAjC;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACrCC,MAAAA,QAAQ,GAAGP,CAAC,CAACU,cAAF,CAAiBJ,KAAjB,CAAX;AACD,KAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AACvC;AACA;AACD,KAHM,MAGA;AACL,YAAM,IAAIK,SAAJ,CAAc,sBAAsB,OAAOL,KAA3C,CAAN;AACD;;AAEDJ,IAAAA,UAAU,CAACU,IAAX,CAAgBZ,CAAC,CAACa,cAAF,CAAiBb,CAAC,CAACS,aAAF,CAAgBN,IAAhB,CAAjB,EAAwCI,QAAxC,CAAhB;AACD;;AAED,SAAOP,CAAC,CAACc,gBAAF,CAAmBZ,UAAnB,CAAP;AACD,CAzBD;;eA2BeH,sB","sourcesContent":["import * as BabelTypes from '@babel/types';\ntype InputObjectType = Record<string, any>;\n\n/**\n * Creates an AST representation of an InputObjectType shape object.\n */\nconst createObjectExpression = (t: typeof BabelTypes, object: InputObjectType): BabelTypes.ObjectExpression => {\n  const properties = [];\n\n  for (const name of Object.keys(object)) {\n    const value = object[name];\n    let newValue;\n\n    // eslint-disable-next-line no-empty\n    if (t.isAnyTypeAnnotation(value)) {} else if (typeof value === 'string') {\n      newValue = t.stringLiteral(value);\n    } else if (typeof value === 'object') {\n      newValue = createObjectExpression(t, value);\n    } else if (typeof value === 'boolean') {\n      newValue = t.booleanLiteral(value);\n    } else if (typeof value === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    } else {\n      throw new TypeError('Unexpected type: ' + typeof value);\n    }\n\n    properties.push(t.objectProperty(t.stringLiteral(name), newValue));\n  }\n\n  return t.objectExpression(properties);\n};\n\nexport default createObjectExpression;\n"],"file":"createObjectExpression.js"}