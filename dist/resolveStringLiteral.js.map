{"version":3,"sources":["../src/resolveStringLiteral.ts"],"names":["path","styleModuleImportMap","sourceAttribute","destinationName","options","resolvedStyleName","value","destinationAttribute","node","openingElement","attributes","find","attribute","name","expression","Error","splice","indexOf"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;eAEgB,CAACA,IAAD,EAAYC,oBAAZ,EAA4DC,eAA5D,EAA2FC,eAA3F,EAAoHC,OAApH,KAA+J;AAC7K,QAAMC,iBAAiB,GAAG,2BAAcH,eAAe,CAACI,KAAjB,CAA+BA,KAA5C,EAAmDL,oBAAnD,EAAyEG,OAAzE,CAA1B;AACA,QAAMG,oBAAoB,GAAGP,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCC,IAApC,CAAyCC,SAAS,IAAI;AACjF,WAAO,OAAOA,SAAS,CAACC,IAAjB,KAA0B,WAA1B,IAAyCD,SAAS,CAACC,IAAV,CAAeA,IAAf,KAAwBV,eAAxE;AACD,GAF4B,CAA7B;;AAIA,MAAII,oBAAJ,EAA0B;AACxB,QAAI,4BAAgBA,oBAAoB,CAACD,KAArC,CAAJ,EAAiD;AAC/CC,MAAAA,oBAAoB,CAACD,KAArB,CAA2BA,KAA3B,IAAoC,MAAMD,iBAA1C;AACD,KAFD,MAEO,IAAI,qCAAyBE,oBAAoB,CAACD,KAA9C,CAAJ,EAA0D;AAC/DC,MAAAA,oBAAoB,CAACD,KAArB,CAA2BQ,UAA3B,GAAwC,oCAAsBP,oBAAoB,CAACD,KAArB,CAA2BQ,UAAjD,EAA6D,0BAAcT,iBAAd,CAA7D,CAAxC;AACD,KAFM,MAEA;AACL,YAAM,IAAIU,KAAJ,CAAU,gCAAgCR,oBAAoB,CAACD,KAA/D,CAAN;AACD;;AAEDN,IAAAA,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCM,MAApC,CAA2ChB,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBC,UAAzB,CAAoCO,OAApC,CAA4Cf,eAA5C,CAA3C,EAAyG,CAAzG;AACD,GAVD,MAUO;AACLA,IAAAA,eAAe,CAACW,IAAhB,CAAqBA,IAArB,GAA4BV,eAA5B;AACCD,IAAAA,eAAe,CAACI,KAAjB,CAA+BA,KAA/B,GAAuCD,iBAAvC;AACD;AACF,C","sourcesContent":["import { isJSXExpressionContainer, isStringLiteral, JSXAttribute, stringLiteral } from \"@babel/types\";\nimport conditionalClassMerge from \"./conditionalClassMerge\";\nimport getClassName from \"./getClassName\";\nimport type { StyleModuleImportMapType, GetClassNameOptionsType } from \"./types\";\n/**\n * Updates the className value of a JSX element using a provided styleName attribute.\n */\n\nexport default ((path: any, styleModuleImportMap: StyleModuleImportMapType, sourceAttribute: JSXAttribute, destinationName: string, options: GetClassNameOptionsType): void => {\n  const resolvedStyleName = getClassName((sourceAttribute.value as any).value, styleModuleImportMap, options);\n  const destinationAttribute = path.node.openingElement.attributes.find(attribute => {\n    return typeof attribute.name !== 'undefined' && attribute.name.name === destinationName;\n  });\n\n  if (destinationAttribute) {\n    if (isStringLiteral(destinationAttribute.value)) {\n      destinationAttribute.value.value += ' ' + resolvedStyleName;\n    } else if (isJSXExpressionContainer(destinationAttribute.value)) {\n      destinationAttribute.value.expression = conditionalClassMerge(destinationAttribute.value.expression, stringLiteral(resolvedStyleName));\n    } else {\n      throw new Error('Unexpected attribute value:' + destinationAttribute.value);\n    }\n\n    path.node.openingElement.attributes.splice(path.node.openingElement.attributes.indexOf(sourceAttribute), 1);\n  } else {\n    sourceAttribute.name.name = destinationName;\n    (sourceAttribute.value as any).value = resolvedStyleName;\n  }\n});\n"],"file":"resolveStringLiteral.js"}