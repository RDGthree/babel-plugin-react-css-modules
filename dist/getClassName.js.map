{"version":3,"sources":["../src/getClassName.ts"],"names":["isNamespacedStyleName","styleName","indexOf","handleError","message","handleMissingStyleName","Error","console","warn","getClassNameForNamespacedStyleName","styleModuleImportMap","handleMissingStyleNameOption","styleNameParts","split","importName","moduleName","optionsDefaults","getClassNameFromMultipleImports","importKeysWithMatches","Object","keys","map","importKey","filter","length","join","styleNameValue","options","styleModuleImportMapKeys","autoResolveMultipleImports","styleModuleMap","className"],"mappings":"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","sourcesContent":["import type { StyleModuleMapType, StyleModuleImportMapType, HandleMissingStyleNameOptionType, GetClassNameOptionsType } from \"./types\";\nimport optionsDefaults from \"./schemas/optionsDefaults\";\n\nconst isNamespacedStyleName = (styleName: string): boolean => {\n  return styleName.indexOf('.') !== -1;\n};\n\nconst handleError = (message: string, handleMissingStyleName: HandleMissingStyleNameOptionType): null => {\n  if (handleMissingStyleName === 'throw') {\n    throw new Error(message);\n  } else if (handleMissingStyleName === 'warn') {\n    // eslint-disable-next-line no-console\n    console.warn(message);\n  }\n\n  return null;\n};\n\nconst getClassNameForNamespacedStyleName = (styleName: string, styleModuleImportMap: StyleModuleImportMapType, handleMissingStyleNameOption?: HandleMissingStyleNameOptionType): string | null | undefined => {\n  // Note:\n  // Do not use the desctructing syntax with Babel.\n  // Desctructing adds _slicedToArray helper.\n  const styleNameParts = styleName.split('.');\n  const importName = styleNameParts[0];\n  const moduleName = styleNameParts[1];\n  const handleMissingStyleName = (handleMissingStyleNameOption || optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType;\n\n  if (!moduleName) {\n    return handleError('Invalid style name: ' + styleName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName]) {\n    return handleError('CSS module import does not exist: ' + importName, handleMissingStyleName);\n  }\n\n  if (!styleModuleImportMap[importName][moduleName]) {\n    return handleError('CSS module does not exist: ' + moduleName, handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importName][moduleName];\n};\n\nconst getClassNameFromMultipleImports = (styleName: string, styleModuleImportMap: StyleModuleImportMapType, handleMissingStyleNameOption?: HandleMissingStyleNameOptionType): string | null | undefined => {\n  const handleMissingStyleName = (handleMissingStyleNameOption || optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType;\n  const importKeysWithMatches = Object.keys(styleModuleImportMap).map(importKey => {\n    return styleModuleImportMap[importKey][styleName] && importKey;\n  }).filter(importKey => {\n    return importKey;\n  });\n\n  if (importKeysWithMatches.length > 1) {\n    throw new Error('Cannot resolve styleName \"' + styleName + '\" because it is present in multiple imports:' + '\\n\\n\\t' + importKeysWithMatches.join('\\n\\t') + '\\n\\nYou can resolve this by using a named import, e.g:' + '\\n\\n\\timport foo from \"' + importKeysWithMatches[0] + '\";' + '\\n\\t<div styleName=\"foo.' + styleName + '\" />' + '\\n\\n');\n  }\n\n  if (importKeysWithMatches.length === 0) {\n    return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n  }\n\n  return styleModuleImportMap[importKeysWithMatches[0]][styleName];\n};\n\nexport default ((styleNameValue: string, styleModuleImportMap: StyleModuleImportMapType, options?: GetClassNameOptionsType): string => {\n  const styleModuleImportMapKeys = Object.keys(styleModuleImportMap);\n  const {\n    handleMissingStyleName = (optionsDefaults.handleMissingStyleName) as HandleMissingStyleNameOptionType,\n    autoResolveMultipleImports = optionsDefaults.autoResolveMultipleImports\n  } = options || {};\n\n  if (!styleNameValue) {\n    return '';\n  }\n\n  return styleNameValue.split(' ').filter(styleName => {\n    return styleName;\n  }).map(styleName => {\n    if (isNamespacedStyleName(styleName)) {\n      return getClassNameForNamespacedStyleName(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    if (styleModuleImportMapKeys.length === 0) {\n      throw new Error('Cannot use styleName attribute for style name \\'' + styleName + '\\' without importing at least one stylesheet.');\n    }\n\n    if (styleModuleImportMapKeys.length > 1) {\n      if (!autoResolveMultipleImports) {\n        throw new Error('Cannot use anonymous style name \\'' + styleName + '\\' with more than one stylesheet import without setting \\'autoResolveMultipleImports\\' to true.');\n      }\n\n      return getClassNameFromMultipleImports(styleName, styleModuleImportMap, handleMissingStyleName);\n    }\n\n    const styleModuleMap: StyleModuleMapType = styleModuleImportMap[styleModuleImportMapKeys[0]];\n\n    if (!styleModuleMap[styleName]) {\n      return handleError('Could not resolve the styleName \\'' + styleName + '\\'.', handleMissingStyleName);\n    }\n\n    return styleModuleMap[styleName];\n  }).filter(className => {\n    // Remove any styles which could not be found (if handleMissingStyleName === 'ignore')\n    return className;\n  }).join(' ');\n});\n"],"file":"getClassName.js"}